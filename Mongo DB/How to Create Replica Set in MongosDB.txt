Step-1: Create 2 Node Folders at any Locations on the System
Step-2: Create 3 Folders "Config", "Data", "Log" for holding Configuration Documents, Data Files and Log Records Respectively.
Step-3: Config File Contents for each Node Config File:

1. Node-1

dbpath = C:\Node1\data\path
logpath = C:\Node1\log\mongod.log\
port: 27020 #Port Number

2. Node-2

dbpath = C:\Node2\data\path
logpath = C:\Node2\log\mongod.log\
port: 27021 #Port Number

Step-3: Create the Replica Set while running the Primary Server using Command

mongod --dbpath "C:\Program Files\MongoDB\Server\5.0\data"
--logpath "C:\Program Files\MongoDB\Server\4.0\log\mongod.log"
--port 27017
--storageEngine=wiredTiger
--journal
--replSet thisisreplsetname


Step-4: Create Replica Sets for Each Node

1. Node-1

mongod --dbpath "C:\Node1\data"
--logpath "C:\Node1\log\mongod.log"
--port 27020
--storageEngine=wiredTiger
--journal
--replSet thisisreplsetname

2. Node-2


mongod --dbpath "C:\Node2\data"
--logpath "C:\Node2\log\mongod.log"
--port 27021
--storageEngine=wiredTiger
--journal
--replSet thisisreplsetname

Step-5: Login in to Primary Server

mongo --bind_ip 127.0.0.1 --port 27017

Step-6: Configure Primary Server

rsconf = {_id: "testisreplsetname", members:[{_id:0,localhost:27017"}]}

rs.initiate(rsconf)

Step-7: Add Nodes to Replica Set by Entering following Command on Primary Shell

rs.add("localhost:27020")

rs.add("localhost:27021")

rs.status()

Step-8: Login on to Nodes

mongo --port 27020

mongo --port 27021

Step-9: Make nodes Slave, Enter following on Nodes Shell

rs.seconaryOk()

rs.isMaster() # to check is Master Node

Step-10: Testing

>> show dbs
>> use dbname
>> db.dbname.insert({name: "MongoDB"})
>> show collections